
#include "NXCDefs.h"
#define ROTATION_SPEED 40
#define SPEED 60
#define COMPASS S2
#define COLOR S3
#define ULTRASONIC S1
#define TOUCH S4

int first =0;
int throw =0;
int distanceGlobal[]={0,0,0,0,0};
int ind =0;
sub close()
{
     RotateMotorEx (OUT_B, 60, 120, 0, false, true);
}
sub open()
{
      RotateMotorEx (OUT_B, 40, -120, 0, false, true);

}
sub ThrowObstacles()
{
    close();
}
sub RotateLeft(int time)
{
    OnRev(OUT_C, ROTATION_SPEED);
    OnFwd(OUT_A, ROTATION_SPEED);
    Wait(time);
    Off(OUT_AC);
}
sub RotateRight()
{
    OnRev(OUT_A, ROTATION_SPEED);
    OnFwd(OUT_C, ROTATION_SPEED);
    Wait(200);
}
sub MoveForward()
{
    byte r,g,b;
    byte output=0;
    int distance ;
    while(true)
    {
               distance = SensorUS(ULTRASONIC);
               // input index
               ind = ind % 5;
               distanceGlobal[ind++]= distance;
               
               ReadSensorHTColor(COLOR,output,r,g,b);
               if((output == 0 || distance < 50) && throw == 0)
               {
                         ThrowObstacles();
                         throw = 1;
                         Off(OUT_AC);
                         break;
               }
               if(output == 0 || distance < 10)
                {
                         Off(OUT_AC);
                         break;
                }
               OnFwd(OUT_AC, SPEED);
               Wait(100);
    }
}
sub MoveBackward()
{
    OnRev(OUT_AC,SPEED);
    Wait(3000);
}

sub goGrab()
{
    MoveForward();
}

sub turnBack()
{
    OnRev(OUT_AC, SPEED);
    Wait(1000);
}

sub goCruise()
{
    byte distance;
    int flag = 1;
    int temp;
    int j;
    while(true)
    {

         temp = 0;
         distance = SensorUS(ULTRASONIC);
               NumOut(0, 0, distance);
         //input distance
         ind = ind % 5;

         distanceGlobal[ind++] = distance;
         for(int i=0; i< 5; i++)
         {
                 temp += distanceGlobal[i];
         }
        // distance = temp / 5;
         
         if(distance < 15)
         {
           flag = 1;
         }
         if(distance > 60)
         {
           flag = 0;
         }
         if(flag == 1)
         {
             OnRev(OUT_AC,SPEED);
             Wait(200);
         }
         else if(flag == 0)
         {
              OnFwd(OUT_AC,SPEED);
              Wait(200);
         }
    }
}

// Initialization of the sensors
task main()
{
    // Launch the scanning process
   // SetSensorLowspeed(COMPASS);
    SetSensorLowspeed(ULTRASONIC);
    SetSensorLowspeed(COLOR);


    int ownGoal;  //represents heading for direction of team's own goal.
    int distance;
    int initial_distance; // distance with the right fence
    float eval_distance; // detected distance

     //instructions to user - point to own goal and press button
    float cos_a=0.0;
    float sin_a=0.0;


    float horizon =0;
    float vertical = 0;

    initial_distance = SensorUS(ULTRASONIC);

     //make continuous compass readings and relative bearing calculations
     int currentCompass;
     float relBearing=0.0;
     float temp=0.0;
     Off(OUT_B);
     byte output;
     byte r,g,b;
     while(true){
                 RotateLeft(170);
            if (first == 0)
            {
               first = 1;
                OnFwdSync (OUT_AC,40,OUT_REGMODE_SPEED);
               Wait(2000);
            }
            MoveForward();
            MoveBackward();
            

            RotateLeft(650);
            TextOut(0,LCD_LINE2,"Hello World!",true);
            Wait(2000);
            if(throw == 1)
            {
                     open();
                     goCruise();
                     break;
            }

     }

}


